"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _cryptoJs = _interopRequireDefault(require("crypto-js"));
var _aes = _interopRequireDefault(require("crypto-js/aes"));
var _kAssert = require("./kAssert");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const ______________K______________ = '______________K______________';
function getter(key) {
  const ret = localStorage.getItem(key);
  return _aes.default.decrypt(ret, ______________K______________).toString(_cryptoJs.default.enc.Utf8);
}
function setter(key, value) {
  localStorage.setItem(key, _aes.default.encrypt(value, ______________K______________).toString());
}
class GlobalStorage {
  get restApiKey() {
    const ret = getter('krk');
    (0, _kAssert.kAssert)(ret, 'restApiKey is not set. did you initialize kakao sdk?');
    return ret;
  }
  set restApiKey(value) {
    setter('krk', value);
  }
  get javascriptKey() {
    const ret = getter('kjk');
    (0, _kAssert.kAssert)(ret, 'javascriptKey is not set. did you initialize kakao sdk?');
    return ret;
  }
  set javascriptKey(value) {
    setter('kjk', value);
  }
  get accessToken() {
    const ret = getter('kat');
    (0, _kAssert.kAssert)(ret, 'accessToken is not set. did you login to kakao?');
    return ret;
  }
  set accessToken(value) {
    setter('kat', value);
  }
  get headers() {
    return {
      Authorization: `Bearer ${this.accessToken}`
    };
  }
}
var _default = exports.default = new GlobalStorage();
//# sourceMappingURL=kGlobalStorage.js.map