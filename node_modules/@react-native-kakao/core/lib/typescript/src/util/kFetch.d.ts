import type { FetchArgs } from 'return-fetch';
type JsonRequestInit = Omit<NonNullable<FetchArgs[1]>, 'body'> & {
    body?: object;
};
type ResponseGenericBody<T> = Omit<Awaited<ReturnType<typeof fetch>>, keyof Body | 'clone'> & {
    body: T;
};
type JsonResponse<T> = T extends object ? ResponseGenericBody<T> : ResponseGenericBody<string>;
export declare const kFetch: <T>(url: FetchArgs[0], init?: JsonRequestInit) => Promise<JsonResponse<T>>;
export declare const kFetchFormUrlEncoded: <T>(url: FetchArgs[0], init?: JsonRequestInit) => Promise<JsonResponse<T>>;
export {};
//# sourceMappingURL=kFetch.d.ts.map