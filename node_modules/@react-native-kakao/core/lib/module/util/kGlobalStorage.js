import CryptoJS from 'crypto-js';
import AES from 'crypto-js/aes';
import { kAssert } from './kAssert';
const ______________K______________ = '______________K______________';
function getter(key) {
  const ret = localStorage.getItem(key);
  return AES.decrypt(ret, ______________K______________).toString(CryptoJS.enc.Utf8);
}
function setter(key, value) {
  localStorage.setItem(key, AES.encrypt(value, ______________K______________).toString());
}
class GlobalStorage {
  get restApiKey() {
    const ret = getter('krk');
    kAssert(ret, 'restApiKey is not set. did you initialize kakao sdk?');
    return ret;
  }
  set restApiKey(value) {
    setter('krk', value);
  }
  get javascriptKey() {
    const ret = getter('kjk');
    kAssert(ret, 'javascriptKey is not set. did you initialize kakao sdk?');
    return ret;
  }
  set javascriptKey(value) {
    setter('kjk', value);
  }
  get accessToken() {
    const ret = getter('kat');
    kAssert(ret, 'accessToken is not set. did you login to kakao?');
    return ret;
  }
  set accessToken(value) {
    setter('kat', value);
  }
  get headers() {
    return {
      Authorization: `Bearer ${this.accessToken}`
    };
  }
}
export default new GlobalStorage();
//# sourceMappingURL=kGlobalStorage.js.map